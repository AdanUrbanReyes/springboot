management:
  endpoints:
    web:
      exposure:
        include: info, health, env, metrics, beans, mappings, refresh

spring:
  application:
    name: spring-boot-config-client
  profiles:
    active: dev
  cloud:
    config:
      uri: http://localhost:8888

#A little explanation about spring could configs.
#we are using the project spring-boot-config-server (https://github.com/AdanUrbanReyes/springboot/tree/master/spring-boot-config-server)
#as the server  project specify as a client you have to passed an APPLICATION name, and a PROFILE you are working.
#and we are passing those in the
#spring:
  #application:
    #name: spring-boot-config-client
# in the before configuration we are specifying APPLICATION and
#spring:
#  profiles:
#    active: dev
# and in the before configuration we are specifying the PROFILE
# finally we specify the uri where the server config lives
#spring:
#  cloud:
#    config:
#      uri: http://localhost:8888
# with next command you could register and unregister certificates in JAVA using keytool from java
#register
#keytool -import -alias spring-cloud-config-server -keystore $JAVA_HOME/jre/lib/security/cacerts -file /home/ayan/Documents/certs/spring-cloud-config-server.pem
#unregister
#keytool -delete -alias spring-cloud-config-server -keystore $JAVA_HOME/jre/lib/security/cacerts
#see all certificates register in the JAVA cacerts
#keytool -list -v -keystore $JAVA_HOME/jre/lib/security/cacerts
#run app specifying ssl
#java -Djavax.net.debug=ssl -Djavax.net.ssl.trustStore=$JAVA_HOME/jre/lib/security/cacerts -Djavax.net.ssl.trustStorePassword=changeit -jar target/spring-boot-config-client-0.0.1.jar
